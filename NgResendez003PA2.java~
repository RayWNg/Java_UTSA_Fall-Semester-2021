/**
 * @(#)Ng003PA2.java
 * @author Raymond Ng and William Resendez
 * @version 1.00 2021/10/17 6:37PM
 *
 * PROGRAM PURPOSE: Create a program that accepts
 * a customer's orders for hammocks. The customer
 * gets a discount based on the order total (size).
 * A sales receipt will be generated.
 */
import java.util.Scanner;  //CLASS THAT WILL CAPTURE INPUT.
import java.util.Calendar;//CLASS TO GET THE DATE AND TIME.

public class NgResendez003PA2 // Class name.//
{
  
  private static Scanner input = new Scanner(System.in);  //A Scanner object to process keyboard entries.
  private static Calendar dateTime = Calendar.getInstance();  //Gets local dateTime based on local timezone.
  private static String salesReceipt; // The private static String salesReceipt can be used by all methods inside NgResendez003PA2 class and its data cannot be accessed outside of this class.// 
  private static String hammockDesc;  // The private static String hammockDesc can be used by all methods inside NgResendez003PA2 class and its data cannot be accessed outside of this class.//
  private static String colorSelected; // The private static String colorSelected can be used by all methods inside NgResendez003PA2 class and its data cannot be accessed outside of this class.//
  private static double price;  // The double price variable can be used by all methods of the class NgResendez003PA2, and its data cannot be accessed outside of this class.// 
  private static boolean repeat; // The boolean repeat can be used by all methods within the class NgResendez003PA2, its data cannot be accessed by other classes.//
  
  public static void Ng003ResendezPA2()  // Default Constructor.//
  {
  }//END of default Constructor//
  
  public static void main(String[] args)//Main method.//
  {
    
    int hammock = 0, //int hammock is initialized to 0.//
      quantity = 0, // int quantity is initialized to 0.//
      color = 0, // int color is initialized to 0.//
      iterations = 1; // The int iterations is initialized to 1 in order for the program to cycle at least once for the user.//
    
    double itemTotal = 0.0, // double itemTotal is initialized to 0.0//
      subtotal = 0.0, // double subtotal is initialized to 0.0//
      discount = 0.0, // double discount is initialized to 0.0//
      discSubtotal = 0.0, // double discSubtotal is initialized to 0.0//
      tax = 0.0, // double tax is initialized to 0.0//
      total = 0.0, // double total is initialized to 0.0//
      discRate = 0.0; // doubble discRate is initialized to 0.0//
    
    char morePurchases = 'y'; //char morePurchased is initialized to y//
    
    boolean printFinal = false; // boolean printFinal is initialized to false.//
    
    salesReceipt = String.format("%n%nSALES RECEIPT"
                                   + "%n%nLAZY HAZY DAYS, INC."
                                   + "%nHuebner Oaks Mall"
                                   + "%nSan Antonio, TX"
                                   + "%n%nDate:  %tD"
                                   + "%nTime:  %tr%n", dateTime, dateTime); // intialization of salesReceipt//
    // beginning of do-while loop//
    do
    {
      do
      {
        hammock = promptHammock();// calls the mathod promptHammock to show the user the available hammock choices and propmpts the user to make a choice between int of 1 to 3.//
        if(hammock < 1 || hammock > 3) // Tests the users response to the prompt for hammock choices, if the response is outside of 1 to 3 range, the following print statement will execute.//
        {
          System.out.printf("%nYou entered an invalid hammock choice. "
                              + "Enter 'Y\' to re-enter your choice or 'N\' to exit the program:  "); // This statement will alert the user that he entered an invalid choice and prompt the user to re-enter their choice or exit the program.// 
          
          if(input.next().charAt(0) == 'n') // captures users input to the above prompt, and returns 'n' to char at position 0 is user chooses to exit program.//
            System.exit(0); // If the user chooses to exit the program, System.exit(0) is executed.//
        }
      }while((hammock < 1 || hammock > 3) && Character.toLowerCase(morePurchases) == 'y'); // this whiel loops test for the users hammock choice to be between the range of 1 to 3, and if the user enters 'Y', the input is converted to lower case to match correct capitalization of char morePurchases at position 0. The following statement executes.//
      
      if(Character.toLowerCase(morePurchases) == 'y') // This if statement coverts the users response to lower case and if it matches lower case 'y', the statement below executes.//
      {
        setHammockSizePrice(hammock); // Calls setHammockSizePrice method and send it the hammock choice made by the user.//
        quantity = promptQuantity(); // Calls promptQuantity method for the user to choose the quantity of hammocks wishing to purchse, saves the users input into the int quatity variable.//
        do // begging of do-while loop.//
        {
          color = promptColor(); // calls the promptColor method and saves the users response inside int variable named color.//
          if(color < 1 || color > 5) // This if statement tests for the users color choice to be within a range of 1 to 5.//
          {
            System.out.printf("%nYou entered an invalid color choice. "
                                + "Enter 'Y\' to re-enter your choice or 'N\' to exit the program:  "); // This print statement executes only if the user inputs a value less than 1 or grater than 5, prompts the user to re-enter to exit the program.//
            if(input.next().charAt(0) == 'n') // captures the users response from the above prompt, if user enters 'n' then it return n to char at position 0.//
              System.exit(0); // exits the program successfully if user has chosen to//
          }
        }while((color < 1 || color > 5) && Character.toLowerCase(morePurchases) == 'y'); //repeat if the color is not valid and morePurchases = y
        
        if(Character.toLowerCase(morePurchases) == 'y') // if the user enters 'Y', the input is converted to lower case to match correct capitalization of char morePurchases at position 0.// 
        {
          setHammockColor(color); // calls setHammockColor method and passes the users color choice to it.//
          itemTotal = quantity * price; // itemTotal is calculated by multiplying quantity * price.//
          subtotal += itemTotal; // Subtotal is calculated by adding the right operand to the variable.//
        }//END if morePurchases = y set color, calculate itemTotal and subtotal.
        
        
        salesReceipt += String.format("%n%-24s %c %-13s %5s %,7d %4s %s%,14.2f",
                                      hammockDesc, '-', colorSelected, " ",
                                      quantity, " ", iterations > 1 ? " " : "$", itemTotal); // adds the hammock to the salesReceipt.//
        
        System.out.printf("%nDo you want to purchase another hammock? "
                            + "Enter 'Y\' to continue or 'N\' to exit the program:  "); // prompts the user if they wish to purchase another hammock.//
        
        morePurchases = input.next().charAt(0); // Char at position 0 is set to the users input from the previous prompt.//
        
        if(Character.toLowerCase(morePurchases) == 'n') // If the user enters 'N', it is converted into lower case, char at position 0 is returned a n. The if statement test for char at position 0 to be n.//
        {
          printFinal = true; // If char at position 0 is n, boolean print final is set to true, and salesReceipt is generated for the user.//
        }//END if morePurchases = n, printFinal is true.
      }//END if morePurchases = y, add to salesReceipt, prompt if user wants to make another purchase.
      
      iterations += 1; // iterations is incremented by 1.//
    }while(Character.toLowerCase(morePurchases) == 'y');  //repeat if user wants to add another hammock.
    
    if(subtotal >= 100000.00) // This if tests for subtotal to be greater than or equal to 100,000.//
    {
      discRate = .035; // if subtotal is greater than or equal to 100,000, the discRate is set to 3.5%//
    }
    else // This else executes the follwing if subtotal is not greater than or equal to 100,000//
    {
      if(subtotal >= 50000.00) // This if tests for subtotal to be greater than or equal to 50,000.00//
      {
        discRate = .03; // if subtotal is greater than or equal to 50,000.00, the discRate is set to 3%//
      }
      else // This else exectues the follwing is subtotal is not greater than or equal to 50,000.00//
      {
        if(subtotal >= 10000.00) // tests for subtotal to be greater than or equalt to 10,000.00//
        {
          discRate = .025; //if subtotal is greater than or equal to 10,000, the discRate it set to 2.5%//
        }
        else // This else executes the following statement is subtotal is not greater than or equal to 10,000//
        {
          if(subtotal >= 5000.00) // this if test for subtotal to be greater than or equal to 5,000//
          {
            discRate = .02; // if subtotal is greater than or equal to 5,000 then discRate is set to 2%//
          }
          else // if subtotal is not within the previous ranges the following statement executes.////
          {
            discRate = 0.0; // if subtotal is not greater than or equal to 5,000. Then the discRate is 0%//
          }//END if subtotal >= 5000 2% discount else discount is 0.
        }//END if subtotal >= 10000 2.5% discount else subtotal >= 5000.
      }//END if subtotal >= 50000 3% discount else subtotal >= 10000.
    }//END if subtotal >= 100000 3.5% discount else subtotal >= 50000.
    
    discount = subtotal * discRate; // the appropriate discount is found by multiplying the subtotal by the discount rate.//
    
    discSubtotal += subtotal - discount; // the discounted subtotal is found by subtracting the appropriate discount from subtotal.//
    
    tax = discSubtotal * .0825; // the appropriate tax is found by multiplying the discounted subtotal * 8.25%//
    
    total = discSubtotal + tax; // the total is found by adding the appropriate tax to subtotal.//
    
    if(printFinal == true) // This if statement tests for printFinal to be true.//
    {
      displaySalesReceipt(subtotal, discount, tax ,total); //displaySalesReceipt method is called and passed the subtotal, discount, tax, and total variables.//
    }//END if printFinal is true, display the salesReceipt.
    
    System.exit(0); // The program is exited and passed a 0.//
    
  }//END main()
  
  /*
   * promptHammock() presents user with sizes of hammock selections available.
   * promptHammock() tests repeat, and prompts user for the size of the hammock. 
   */
  public static int promptHammock()
  {
    do
    {
      System.out.printf("%nLAZY HAZY DAYS, INC."
                          + "%n%nOur beautiful cotton hammocks sport a "
                          + "traditional look and are very comfortable. "
                          + "%n%n1. Small - 48 in . x 11 ft. - Good for 1 "
                          + "person\t\t\t\t$100.00"
                          + "%n2. Large - 55 in . x 13 ft. - Good for 2 "
                          + "people\t\t\t\t$140.00"
                          + "%n3. Deluxe - 60 in. x 13 ft. - Good for 2 or "
                          + "more people\t\t\t$175.00"
                          + "%n%nEnter your choice:  ");
      
      repeat = !input.hasNextInt(); //AS LONG AS THE INPUT IS "NOT" AN INTEGER.
      
      validateNumber();
    }while(repeat == true); //END do-while repeat is true.
    
    return input.nextInt();
  }//END promptHammock(): static void
  
  /**
   * setHammockSizePrice() tests hammock to determine the hammockDesc.
   * and price to a switch statement.
   */
  public static void setHammockSizePrice(int hammock)
  {
    switch (hammock) //switch header that evaluates hammock.
    {
      case 1:
        hammockDesc = "Small - 48 in. x 11ft.";
        price = 100.00;
        break;
      case 2:
        hammockDesc = "Large = 55in. x 13 ft.";
        price = 140.00;
        break;
      case 3:
        hammockDesc = "Deluxe - 60 in. x 13 ft.";
        price = 175.00;
        break;
    }//END switch scope
  }//END setHammockSizePrice(hammock: int): static void
  
  /*
   * setHammockColor() presents user with colors of hammocks available,
   * setHammockColor() tests color to determine the colorSelected to a switch statement.
   */
  public static void setHammockColor(int color)
  {
    switch (color) //switch header that evaluates color.
    {
      case 1:
        colorSelected = "Crimson Red";
        break;
      case 2:
        colorSelected = "Emerald Green";
        break;
      case 3:
        colorSelected = "Indigo Blue";
        break;
      case 4:
        colorSelected = "Natural";
        break;
      case 5:
        colorSelected = "Purple Haze";
        break;
    }//END switch scope.
  }//END setHammockColor(color: int): static void
  
  /**
   * promptQuanity() tests repeat, and prompts user to enter quantity
   * of hammocks.
   */
  public static int promptQuantity()
  {
    do
    {
      System.out.printf("%nEnter the quantity:  ");
      
      repeat = !input.hasNextInt(); //AS LONG AS THE INPUT IS "NOT" AN INTEGER.
      
      validateNumber(); //Test the validity of quantity.
    }while(repeat == true); //END do-while repeat is true.
    
    return input.nextInt();
  }//END promptQuantity(): static int
  
  /**
   * promptColor() tests repeat, and prompts user for the color of the hammock
   */
  public static int promptColor()
  {
    do
    {
      System.out.printf("%n1. Crimson Red"
                          + "%n2. Emerald Green"
                          + "%n3. Indigo Blue"
                          + "%n4. Natural"
                          + "%n5. Purple Haze"
                          + "%n%nEnter your choice of colors:  ");
      
      repeat = !input.hasNextInt();
      
      validateNumber(); // tests the validity of the number.//
    }while(repeat == true);
    
    return input.nextInt();
  }//END promptColor(): static int
  
  /**
   * validateNumber() tests a number entered to see if it is either a valid integer or
   * floating-point.
   */
  public static void validateNumber()
  {
    if(repeat == true) //AS LONG AS THE INPUT IS "NOT" AN INTEGER OR DOUBLE.
    {
      input.next(); //CONSUME NON-NUMERIC VALUE.
      System.out.printf("%nYou must enter a valid integer or floating-point value!%n");
    }//END if repeat is true
  }//END validateNumber(): static void
  
  /*
   * displaySalesReceipt() calculates the discSubtotal, tax, and total and print the
   * salesReceipt with the subtotal, discount, tax, and total.
   */
  public static void displaySalesReceipt(double subtotal, 
                                         double discount, 
                                         double tax, 
                                         double total)
  {
    salesReceipt += String.format("%n%n%52s %-6s $%,14.2f"
                                + "%n%52s %-7s %,14.2f"
                                + "%n%52s %-7s %,14.2f"
                                + "%n%n%52s %-6s $%,14.2f%n","SUBTOTAL:","  ",
                                  subtotal, "DISCOUNT:", "  ", discount, "TAX @ 8.250%:",
                                  "  ", tax, "TOTAL:", "  ", total);
    System.out.println(salesReceipt); // This statement prints the salesReceipt for the user.//
  }//END displaySalesReceipt(subtotal: double, discount: double, tax: double, total: double): static void
  
}//END APPLICATION CLASS NgResendez003PA2.